#### Definice JAGS modelu pomocí proměnné

```{r jags-model-variable}
#| echo: true
#| eval: false
#| code-caption: Použití balíčku rjags s modelem v proměnné
#| code-label: code-jags-variable
model <- "
model {
    for (i in 1:N) {
        x[i] ~ dbern(p)
    }

    p ~ dbeta(alpha, beta)
}
"

rjags::jags.model(
    file = textConnection(model), # Model
    data = list(
        N     = length(simulovana_data), # Pocet pozorovani
        x     = simulovana_data,         # Vstupni data
        alpha = 0.01,                    # Hodnota parametru alpha
        beta  = 0.01                     # Hodnota parametru beta
    ),
    inits = list(
        p = 0.5,                         # Pocatecni hodnota
        .RNG.name = "base::Super-Duper", # Generator nahodnych cisel
        .RNG.seed = 684                  # Seed
    ),
    n.chains = 2,  # Pocet retezcu
    n.adapt  = 500 # Adaptacni doba
)
```

#### Použití základní funkce update pro spalovací období

```{r jags-update}
#| echo: true
#| warning: false
#| eval: false
#| code-caption: Volání funkce update po načtení balíčku jags
#| code-label: code-jags-update
library(rjags)

update(object = jags.model, # Model
       n.iter = 1000,       # Pocet burn-in iteraci
       progress.bar = "none")
```

#### Definice Stan modelu pomocí proměnné

```{r stan-model-variable}
#| echo: true
#| eval: false
#| code-caption: Použití balíčku rstan s modelem v proměnné
#| code-label: code-stan-variable
model <- "
// Definice vstupnich dat
data {
    int<lower=1> N;               // Velikost vzorku
    int x[N];                     // Data
    real<lower=0, upper=1> alpha; // Parametr alpha
    real<lower=0, upper=1> beta;  // Parametr beta
}

// Definice parametrů
parameters {
    real<lower=0, upper=1> p;      // Odhadovana relativni cetnost
}

// Definice modelu
model {
    x ~ bernoulli(p);      // Rozdeleni dat 
    p ~ beta(alpha, beta); // Rozdeleni parametru p
}
"

rstan::stan(
    model_code = model,
    model_name = "Jednoduchy priklad s promennou",
    data = list(
        N     = length(simulovana_data), # Pocet pozorovani
        x     = simulovana_data,         # Vstupni data
        alpha = 0.1,                     # Hodnota parametru alpha
        beta  = 0.1                      # Hodnota parametru beta
    ),
    init = list(
        list(p = 0.5), # Pocatecni hodnoty
        list(p = 0.5)
    ),
    chains = 2,         # Pocet retezcu
    iter   = 2000 + 5000, # Pocet celkovych iteraci
    warmup = 2000,      # Delka spalovaciho obdobi
    thin = 1,           # Thinning parametr
    seed = 59,          # Seed pro reprikovatelnost
    verbose = FALSE
)
```

```{r }
#| echo: false
#| label: tbl-gens-head
#| tbl-cap: Příklad generovaných dat pro simulaci
r <- readRDS("./data/gens.rds")
set.seed(7)
slice_sample(r, n = 5) |> 
    gt()
```

```{r }
#| eval: false
#| echo: true
#| code-caption: Simulace frekventistických odhadů
#| code-label: code-sim-freq
p <- seq(from = 0.05, to = 0.95, by = 0.1)
n <- seq(from = 1, to = 30)
B <- 1000
results <- tibble()

set.seed(546)
for (tn in n) {
    for (tp in p) {
        for (b in seq_len(B)) {
            x <- rbinom(n = tn, size = 1, prob = tp)
            k <- sum(x)
            w <- wilson_est(s = k, n = tn)
            results <<- bind_rows(
                results,
                tibble(
                    metoda = "Wilson",
                    n = tn,
                    k = k,
                    p = tp,
                    odhad = w$p,
                    spodni = w$ci_lower,
                    horni = w$ci_upper
                )
            )
        }

        cat(glue("{tn} - {tp} - hotovo"))
        cat("\n")
    }
}
```

```{r }
#| eval: false
#| echo: true
#| code-caption: Simulace bayesovských odhadů
#| code-label: code-sim-bayes
p <- seq(from = 0.05, to = 0.95, by = 0.1)
n <- seq(from = 1, to = 30)
betas <- tibble()

for (tn in n) {
    for (i in seq(from = 0, to = tn)) {
        k <- tn - i
        
        alpha <- 1 + i
        beta  <- 1 + k
        
        betas <- bind_rows(
            betas,
            tibble(
                desc = glue("Beta({alpha}, {beta})"),
                alpha = alpha,
                beta = beta,
                EX = alpha / (alpha + beta),
                spodni = qbeta(0.025, alpha, beta),
                horni  = qbeta(0.975, alpha, beta),
                n = tn,
                k = i
            )
        )
    }
}
```