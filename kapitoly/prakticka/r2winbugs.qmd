První software, který se snažil zpopularizovat bayesovské metody je software
BUGS (*Bayesian inference Using Gibbs Sampling*). Projekt, jehož cílem bylo
vytvořit software pro bayesovskou statistiku, započal už v roce 1989 na
oddělní biostatistiky na univerzitě Cambridge a vedl k vytvoření programu BUGS.
Postupem času se program vyvynul do nástroje WinBUGS, který je prezentován
v této práci 
\parencite{TheBayesianScientificWorkingGroup2024_BayesianScientificWork}.

Prví verze programu byla představena na Bayesovské konferenci ve Valencii v
roce 1991 a později byla distribuovaná na disketách. Z počátku byly implementovány
s Gibsovým vzorkováním pouze jendnoduché metody a úpravy, jako adaptivní vzorkování
nebo bayesovské inverze. Po čase byla implementována i velmi limitující verze
Metropolisova-Hastingova algoritmu, která fungovala na bázi mřížek [^r2winbugs-grid].

[^r2winbugs-grid]: Jedná se o tzn. *grid-search*, kdy se hledají správné hodnoty v předem
definované tabulce.

V 90. letech 20. století se projekt přesunul do Imperial College v Londýně a 
program BUGS se začal vyvíjet i pro osobní počítače se systémem Windows. Do
verze WinBUGS se časem implementovala komplexní a plnohodnotná verze 
Metropolisova-Hestingova algoritmu, která dokázala pracovat bez aproximační
tabulky. Velkou sílou však bylo, že uživatel dokázal definovat své apriorní
předpoklady, data, vztahy a cykly v grafickém prostředí. Díky tomu mohli
program WinBUGS používat i lidé bez zkušeností v programování.

V roce 2004 započala na univerzitě v Helsinách práce na projektu s názvem
OpenBUGS, který měl za úkol splnit tři primární cíle:

1) rozdělit funkčnost softwaru od jejího vzhledu,
2) udělat verzi nezávislou na operačním prostředí, a
3) vytvožit experimentálnější prostředí pro zkoušení nových metod.

Pro splnění prvního cíle byl vyvynut nástroj s názevm BRugs. Díky oddělení
funkčnosti a vzhledu lze BRugs napojit na další programy jako SAS, Excel nebo 
R a využívat tak simulací BUGS i mimo jeho prostředí. Ke splnění druhého
cíle byla vyvynutá další verze softwaru bugs s názvem LinBUGS pro vývoj v
linuxovém prostředí procesory Intel. Experimentální prostředí pro testování
nových metod byla vytvořena open-source [^r2winbugs-os] verze OpenBUGS. Vývoj
obou aplikací se časem rozdělil a obě mají silné stránky v něčem jiném.
Software OpenBUGS dokáže flexibilně měnit simulační metody nebo simulace 
provádět paralelně. Vývoj softwaru WinBUGS mířil primárně na excelenci v 
epidemiologickém a farmakokinetikou.

[^r2winbugs-os]: software, který má veřejný zdrojový kód; tzn. *otevřený software*.

Aplikace z rodiny BUGS však trpěli několika nedostatky. Tím hlavním je, že 
jejich vývoj závisí na hrstce vývojářu a i přes to, že je kód (alespoň pro 
software OpenBUGS) veřejně dostupný, je vývoj problematický. To je způsobeno
primárně komplexitou kódu a programovacím jazykem, ve kterém je software napsaný.
Druhou velkou nevýhodou je právě programovací jazyk, který se nedokáže vyrovnat
např. jazyku C++, ve kterém jsou napsána většina novodobých simulačních programů
\parencite{LunnEtAl2009_BUGSProjectEvolution}.

V programovacím jazyce R lze s programy BUGS komunikovat pomocí hned
několika balíčků. První možností jsou balíčku R2WinBUGS a R2OpenBUGS
\parencite{SturtzEtAl2005_R2WinBUGSPackageRunning},
které umí komunikovat s programy WinBUGS a OpenBUGS. Jelikož byl balíček
OpenBUGS aktualizován naposledy v r. 2020, je smysluplnější[^r2winbugs-pkgs]
v případě zájmu používat balíček R2WinBUGS, který poslední aktualizaci obdržel
v r. 2024. Balíčky nenabízejí aplikační přístup, ale slouží jako automatizační
pomůcka. Pokud funkcím předáte data, model a parametry simulací, tak se spustí
zvolený software (OpenBUGS nebo WinBUGS), do kterého jsou automaticky zvoleny
preference uživatel pomocí skriptu. Po dokončení se program sám zavře a 
výsledky jsou dopstupné v jazyce R.

[^r2winbugs-pkgs]: aktuální k 27. Sprnu, 2024.

Druhou možností je balíček BRugs 
\parencite{ThomasEtAl2006_MakingBUGSOpen}, který dokáže komunikovat s OpenBUGS
pomocí programatického prostředí a není tedy nutné, aby balíček/funkce na pozadí
spouštěli samotné programy. Na rozdíl od balíčku R2WinBUGS, který externě spouští
program, je BRugs více flexibilní. Nastavení probíhá pomocí metod, které
nastavují, spouští a inicializují jednotlivé řetěze a simulace. Nevýhodou balíčku
je, že je nutné ho kompilovat, což může být pro méně zkušené uživatele náročné.

#### Balíček {R2WinBUGS}



```{r r2winbugs}
set.seed(123)
x <- rbinom(10, 1, .6)

bugs <- R2WinBUGS::bugs(
    data = list(
        N     = length(x), # Počet pozorování
        x     = x,         # Vstupní data
        alpha = 0.01,      # Hodnota parametru alpha
        beta  = 0.01       # Hodnota parametru beta
    ),
    # Počáteční hodnoty
    inits = list(
        list(p = 0.5),
        list(p = 0.5)
    ),
    n.chains = 2, n.iter = 5000, n.burnin = 1000, n.thin = 1,
    # Parametry, které uložit
    parameters.to.save = c("p"),
    # Cesta k modelu
    working.directory = "kapitoly/modely",
    model.file = "r2winbugs.txt",
    # Cesta k programu WinBUGS
    bugs.directory = r"(C:\Users\Mike\Downloads\WinBUGS14\WinBUGS14)",
    # Odstraň pracovní soubory
    clearWD = T,
    # Replikovatelnost
    bugs.seed = 123
)
```

Výsledek

```{r }
print(bugs)
```

Odhad parametru p.

```{r }
mcmcplots::caterplot(mcmcout = bugs,             # Výstup modelu
                     parms = "p",                # Vybraný parametr
                     val.lim = c(0, 1),          # Limity na ose X
                     quantiles = list(
                        outer = c(0.025, 0.975), # 95% interval kredibility
                        inner = c(0.055, 0.945)  # 89% interval kredibility
                     )
)
```

Posteriorní rozdělení jednotlivých chainů.

```{r }
mcmcplots::denplot(mcmcout = bugs, # Výstup modelu
                   parms = "p",    # Vybraný parametr
                   xlim = c(0, 1), # Limity na ose X
                   ci = 0.89       # 89% Interval kredibility
)
```

Vývoj jednotlivých chainů.

```{r }
mcmcplots::traplot(mcmcout = bugs, # Výstup modelu
                   parms = "p",    # Vybraný parametr
                   ylim = c(0, 1)  # Limity na ose Y
)
```

Autokorelace.

```{r }
par(mrowf=c(1,2))
mcmcplots::autplot1(x = mcmcplots::as.mcmc.bugs(bugs),
                   chain = 1)
mcmcplots::autplot1(x = mcmcplots::as.mcmc.bugs(bugs),
                   chain = 2)
par(mrowf=c(1,1))
```
