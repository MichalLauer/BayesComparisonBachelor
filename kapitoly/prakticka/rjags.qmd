Další populární software pro generování vzorků z posteriorního rozdělení pomocí
Gibbsova vzorkování je JAGS (*Just Another Gibbs Sampler*), který byl vytvořen v roce 2023 profesorem Martynem
Plummerem. JAGS si zakládá na softwaru a syntaxy BUGS, od kterého se však liší několika
podstatnými změnani, díky kterým je aktivně vyvíjen a jeho vývoj je mnohem
flexibilnější. \parencite{DepaoliEtAl2016_JustAnotherGibbs} uvádí, že je JAGS v
porovnání s BUGS *\enquote{více rozšiřitelný, flexibilní a uživatelsky přívětivý než software BUGS}*.

Primárním důvodem tohoto tvrzení je jazyk, ve kterém je JAGS napsaný. Oproti
BUGS, který používá programovací jazyk Fortran, je zdrojový kód pro JAGS napsán
v jazyce C++. Díky tomu lze JAGS používat na jiných[^jags-os] platformách
než je operační systém Windows, na kterém je verze WinBUGS závislá. Tato 
flexibilita umožňuje i jednodušší vývoj, který není závislý na platformě a
chyby nebo rozšíření lze psát i na jiných[^jags-oos] platformách. Větší
rozříšenost jazyku C++ také zvětšuje počet potencionálních vývojářů
\parencite{DepaoliEtAl2016_JustAnotherGibbs}.

[^jags-os]: Autoři \parencite{DepaoliEtAl2016_JustAnotherGibbs} zmiňují primárně operační systémy Windows, Linux, OS X a UNIX.

[^jags-oos]: Teoreticky lze vyvíjet WinBUGS i na jiném operačním systému, ale 
je nutné k tomu používat externí nástroje, které dokáží systém Windows emulovat.

JAGS také nabízí možnost vytvoření a přidání vlastních modulů, které lze
následně použít při generování vzorků. Rozšířit JAGS lze pomocí jiných
rozdělení, funkcí a vzorkovačů. Oproti BUGS je nástroj JAGS vyvinut bez grafického
rozhrání a ovládá se pomocí příkazového řádku; primárně však k ovládání slouží
různé balíčky v programovacích jazycích R nebo Python. Syntaxe pro tvoření
Bayesovských modelů je založená na formátu BUGS a v jednoduchých případech je
identická
\parencite{DepaoliEtAl2016_JustAnotherGibbs}.

Pro generování vzorků pomocí softwaru JAGS byl vytvořen balíček rjags 
\parencite{Plummer2023_RjagsBayesianGraphical}. Oproti balíčku R2WinBUGS se
v jazyce R pracuje s dvěma hlavními objekty:

- objekt, který reprezentuje kompilovaný model, a
- objekt, ve kterém jsou uložené vygenerované vzorky.

Díky tomu, že je JAGS ovládán pomocí příkazové řádky, lze s modelem pracovat
i bez spouštění externích programů a uživatel má mnohem větši kontrolu při
tvoření modelu a následném generování vzorků. Pomocí funkcí lze jednoduše
znovu generovat další vzorky ze stejného stavu, ve kterém řetězec skončil
\parencite{DepaoliEtAl2016_JustAnotherGibbs}.

Druhým populárním balíčkem, který byl pro JAGS a prostředí R vytvořen, je 
runjags \parencite{Denwood2016_RunjagsPackageProviding}. Jeho sílá spočívá v tom,
že nabízí komplexnější nástroje k tomu, jak generovat vzorky. Balíček zvládné
paralelní generování, díky kterému lze dosáhnout aproximace posteriorního 
rozdělení rychleji a efektivněji. Při generování lze také automaticky kontrolovat
kvalitu konvergence a části, které nejsou kvalitní, umí nahradit.
Balíček také nabízí funkce, které dokáží porovnat generované vzorky z dvou
různých JAGS modelů a navzájem je porovnat
\parencite{DepaoliEtAl2016_JustAnotherGibbs}.

Třetí populární balíček pro práci se softwarem JAGS nese názevm R2jags 
\parencite{SuYajima2024_R2jagsUsingRun}. Název napovídá, že jeho cílem
je vytvořit funkce, které budou velmi podobné funkcím z balíčku R2WinBUGS
pro ovládání softwaru BUGS. Díky podobnému prostředí, avšak velmi odlišnému
nástroji, dokáží JAGS ovládat i uživatelé, kteří znají pouze práci s BUGS.
Balíček také nabízí např. paralelizaci, automatickou kontrolu konvergence
nebo dynamické generování vzorku až do uspokojivého stavu
\parencite{DepaoliEtAl2016_JustAnotherGibbs}.

Všechny tři nástroje vrací generované vzorky v objektu, který má třídu
`mcmc.list`, se kterým dokáže pracovat balíček coda (CODA, *Convergence
Diagnosis and Output Analysis*)
\parencite{PlummerEtAl2006_CODAConvergenceDiagnosis}. coda obsahuje funkce,
které dokáží vypočítat mnoho statistik, které se týkají kvality konvergence,
posteriorních rozdělení nebo jiných diagnostických statistik. K většině z nich
dokáže vytvořit také obrázek v základní R grafice. Nástroj je sice připravený
hlavně pro software JAGS, ale obsahuje funkci `as.mcmc.list`, pomocí které lze
konvertovat BUGS výstup na objekt, který už je s balíčkem coda kompatibilní.
Výhody a diagnostiky z balíčku coda lze tedy uplatnit i na vzorky,
které jsou generovány softwarem BUGS.

Kromě již zmíněných balíčků, které slouží pro obecné generování vzorků, existuje
i několik balíčků, které jsou vytvořené ke specifickým problémům a na pozadí
využívají právě JAGS. Jsou to například balíčku blavaan 
\parencite{MerkleRosseel2018_BlavaanBayesianStructural}
pro analýzu latentních proměnných, blme 
\parencite{ChungEtAl2013_NondegeneratePenalizedLikelihood}
pro pokročilou lineární regresi nebo bayescount 
\parencite{Denwood2023_BayescountPowerCalculations} pro jednoduchou
analýzu dat s diskrétními číselnými proměnnými
\parencite{DepaoliEtAl2016_JustAnotherGibbs}.

#### Balíček {rjags}

Pro generování vzorků z definovaného modelu je nejprve nutné model definovat.
K tomu slouží funkce `jags.model`, která je použitá ve kódu \ref{code-jags-model}.

```{r jags-model}
#| echo: true
#| code-caption: Simulace pomocí balíčku rjags a nástroje JAGS
#| code-label: code-jags-model
jags.model <- rjags::jags.model(
    file = "./kapitoly/modely/rjags.txt", # Model
    data = list(
        N     = length(simulovana_data), # Pocet pozorovani
        x     = simulovana_data,         # Vstupni data
        alpha = 0.01,                    # Hodnota parametru alpha
        beta  = 0.01                     # Hodnota parametru beta
    ),
    inits = list(
        p = 0.5,                         # Pocatecni hodnota
        .RNG.name = "base::Super-Duper", # Generator nahodnych cisel
        .RNG.seed = 684                  # Seed
    ),
    n.chains = 2,   # Pocet retezcu
    n.adapt  = 500, # Adaptacni doba
    quiet = TRUE    # Bez vypisu
)
```

Na první řádku se inicializuje objekt `jags.model`, ve kterém bude uložena 
reference na JAGS model. Na řádku 2 parametr `file` odkazuje na definici
modelu v textovém souboru. Pro balíček rjags lze model definovat přímo
v kódu, ale pro jednotnost je zde použit formát se souborem. Příklad toho,
jak definovat model přímo v kódu, je v příloze \ref{code-jags-variable}.

Řádky 3 -- 8 definují data, která budou v modelu použitá. Definice počátečních
hodnot a způsobu náhodného generování vzorků je na řádcích 9 -- 13. Díky tomu,
že je explicitně uveden generátor a seed je zaručené, že výsledky budou
replikovatelné. Řádek 14 nastavuje počet řetězců a řádek 15 adaptační[^jags-adapt]
dobu.

[^jags-adapt]: Jelikož se JAGS snaží generovat vzorky co nejoptimálněji a 
nejrychleji, snaží se pro každý parametr vybrat vhodný způsob generování. K tomu
slouží právě adaptační doba.

Pokud je model definovaný správně a všechna vstupní data jsou zadána, model se
příkazem inicializuje do proměnné `jags.model`. Objekt `jags.model` je list,
který obsahuje různé funkce, které popisují stav modelu. Lze zjistit např.
kolik řetězců bude použito (`jags.model$nchain()`) nebo kolik vzorků bylo
již vygenerováno (`jags.model$iter()`).

Jak již bylo zmíněno, syntaxe JAGS je založená na softwaru BUGS, a proto
lze v tomto případě použít identickou syntaxy. Model zobrazený ve výpisu
\ref{model-jags} je identický s modelem \ref{model-bugs}, který byl použit při
generování vzorků pomocí BUGS.

```{r jags-model-print}
#| results: model
#| model-caption: Příklad modelu definovaném pro software JAGS
#| model-label: model-jags
cat(paste(readLines("./kapitoly/modely/rjags.txt"), collapse = "\n"))
```

Dalším krokem je vygenerovat několik prvních vzorků, které budou spálené v tzn.
spalovacím období. V kódu \ref{code-jags-burnin} je pro tyto ůčely použitá 
funkce `update.jags`.[^jags-update]. Pro udržení jednotnosti je zde funkce
exportovaná přímo z balíčku rjags; po načtení balíčku lze volat pouze funkci
update, viz. kód v příloze \ref{code-jags-update}.

[^jags-update]: Teoreticky lze místo funkce `update` generovat libovolný
počet vzorků a ty nikam neuložit. Díky tomu, že si JAGS model pamatuje stav,
ve kterém generování skončilo, by byl výsledek identický.

```{r }
#| echo: true
#| code-caption: Generování spálených vzorků
#| code-label: code-jags-burnin
rjags:::update.jags(object = jags.model, # Model
                    n.iter = 1000,       # Pocet burn-in iterací
                    progress.bar = "none")
```

Po spalovacím období lze generovat vzorky z posteriorního rozdělení, k čemuž
slouží funkce `coda.samples`. Její použití je v kódu \ref{code-jags-gener}.

```{r }
#| echo: true
#| code-caption: Generování vzorků z JAGS modelu
#| code-label: code-jags-gener
jags.samples <- rjags::coda.samples(
    model = jags.model,      # Model, pomoci ktereho generovat
    variable.names = c("p"), # Promenna, kterou sledovat
    n.iter = 5000,           # Kolik vzorku z kazdeho chainu generovat
    thin = 1,                # Thinning parametr
    quiet = TRUE
)
```

Na řádku 1 se ukládají výsledné generované vzorky jako typ `mcmc.list` do
proměnné `jags.samples`. Řádek 2 říká, který model se má použít a řádek 3
nastavuje parametry, které by se měli uložit. Řádky 4 -- 5 slouží k nastavení
počtu iterací pro jednotlivé řetězce a thinning parametr. Výsledky lze
sumarizovat pomocí funkce `summary`, viz. výpis \ref{model-jags-summary}.

```{r }
#| echo: false
#| results: model
#| model-caption: Shrnutí generovaných JAGS vzorků pomocí funkce summary
#| model-label: model-jags-summary
summary(jags.samples)
```

Řádky 2 -- 5 popisují způsob, jakým byly vzorky generovány. Text říká, že se
generovalo 5 000
vzorků ve dvou řetězcích s thinning intervalem 1. Dle řádků 2 se jedná o vzorky
1 001 -- 6 000, což odpovídá nastavení spalovacího období, kde bylo prvních
1 000 vzorků spáleno. Na řádcích 7 -- 12 se nachází popis posteriorního rozdělení
pro každou sledovanou proměnnou. V tomto případě se ve výpisu nachází pouze 
popis posteriorního rozdělení pro parametr *p*, kde je průměr 
`r fmt_num(mean(unlist(jags.samples)))` 
se směrodatnou odchylkou
`r fmt_num(sd(unlist(jags.samples)))`.
Statistiky *Naive SE* a *Time-serise SE* označují standardní chybu průměru 
(s vlivem autokorelace) a standardní chybu časové řady
\parencite{Plummer2023_RjagsBayesianGraphical}.
Druhý část výpisu na řádcích 13 -- 16 popisuje jednotlivé kvantily 
posteriorních rozdělení.

#### Balíček coda

Pomocí balíčku rjags lze provádět dva primární výkony:

- komunikovat s vytvořeným modelem, a
- generovat nové vzorky pomocí JAGS.

To naznačují i samotné výstupy, které popisují pouze vygenerované vzorky z
posteriorního rozdělení. Ve výstupech se např. nenachází různé statistiky
popisující konvergenci dat, jako tomu je v případě balíčku R2WinBUGS ve výpisu
\ref{model-r2winbugs-out}. K analýze posteriorního rozdělení, kvality 
konvergence nebo tvořením základních grafů slouží právě balíček coda.

Příkladem může být efektivní velikost velikost vzorku, která lze vypočítat
pomocí funkce effectiveSize. Kód \ref{code-jags-coda-ess}
ukazuje, jak vypočítat efektivní  velikost vzorku pro každý řetěz, který byl
pro generování použit.

```{r }
#| echo: true
#| code-caption: Výpočet efektivní velikosti vzorku pomocí balíčku coda
#| code-label: code-jags-coda-ess
#| results: model
#| model-caption: Efektivní velikost vzorků pro jednotlivé řetězce
#| model-label: model-jags-coda-ess
sizes <- sapply(X = seq_along(jags.samples),
                FUN = \(i) coda::effectiveSize(jags.samples[i]))
names(sizes) <- paste("ESS", seq_along(jags.samples))

print(sizes)
```

Výpis \ref{model-jags-coda-ess} ukazuje, že efektivní velikost je rovna 
5 000 v obou případech; autokorelace je tedy prakticky nulová a konvergence
proběhla v pořádku.

Balíček coda take nabízí možnost podívat se na autokorelaci pomocí funkce
`autocorr.plot`

```{r }
#| label: fig-jags-autocor
#| fig-cap: Autokorelace jednotlivých vzorků
js1p <- jags.samples[[1]]
dimnames(js1p)[[2]] <- "Autokorelace prvního řetězce pro parametr P"
coda::autocorr.plot(x = js1p)
```

Na obrázku [@fig-jags-autocor] lze pozorovat velmi nízkou autokorelaci od
zpoždění (*lagu*) jedna. Velmi jednoduše lze také zobrazit výsledné
nenormalizované posteriorní rozdělení parametru p pomocí funkce 
`densplot`.

```{r }
#| label: fig-jags-poster
#| fig-cap: Posteriorní rozdělení parametru p pomocí balíčku coda
coda::densplot(x = jags.samples[[1]],
               main = "Nenormalizované posteriorní rozdělení parametru p",
               xlab = "p")
```

Na obrázku [@fig-jags-poster] lze vidět posteriorní rozdělení parametru p.
Pod křivkou hustoty se nachází body, které reprezentují jednlivé vzorky,
které byly vygenerovány.

