První software, který se snažil zpopularizovat bayesovské metody je software
BUGS (*Bayesian inference Using Gibbs Sampling*). Projekt, jehož cílem bylo
vytvořit software pro bayesovskou statistiku, započal už v roce 1989 na
oddělní biostatistiky na univerzitě Cambridge a vedl k vytvoření programu BUGS.
Postupem času se program vyvynul do nástroje WinBUGS, který je prezentován
v této práci 
\parencite{TheBayesianScientificWorkingGroup2024_BayesianScientificWork}.

Prví verze programu byla představena na Bayesovské konferenci ve Valencii v
roce 1991 a později byla distribuovaná na disketách. Z počátku byly implementovány
s Gibsovým vzorkováním pouze jendnoduché metody a úpravy, jako adaptivní vzorkování
nebo bayesovské inverze. Po čase byla implementována i velmi limitující verze
Metropolisova-Hastingova algoritmu, která fungovala na bázi mřížek [^bugs-grid]
\parencite{LunnEtAl2009_BUGSProjectEvolution}.

[^bugs-grid]: Jedná se o tzn. *grid-search*, kdy se hledají správné hodnoty v předem
definované tabulce.

V 90. letech 20. století se projekt přesunul do Imperial College v Londýně a 
program BUGS se začal vyvíjet i pro osobní počítače se systémem Windows. Do
verze WinBUGS se časem implementovala komplexní a plnohodnotná verze 
Metropolisova-Hestingova algoritmu, která dokázala pracovat bez aproximační
tabulky. Velkou sílou však bylo, že uživatel dokázal definovat své apriorní
předpoklady, data, vztahy a cykly v grafickém prostředí. Díky tomu mohli
program WinBUGS používat i lidé bez zkušeností v programování
\parencite{LunnEtAl2009_BUGSProjectEvolution}.

V roce 2004 započala na univerzitě v Helsinách práce na projektu s názvem
OpenBUGS, který měl za úkol splnit tři primární cíle:

1) rozdělit funkčnost softwaru od jejího vzhledu,
2) udělat verzi nezávislou na operačním prostředí, a
3) vytvožit experimentálnější prostředí pro zkoušení nových metod.

Pro splnění prvního cíle byl vyvynut nástroj s názevm BRugs. Díky oddělení
funkčnosti a vzhledu lze BRugs napojit na další programy jako SAS, Excel nebo 
R a využívat tak simulací BUGS i mimo jeho prostředí. Ke splnění druhého
cíle byla vyvynutá další verze softwaru bugs s názvem LinBUGS pro vývoj v
linuxovém prostředí procesory Intel. Experimentální prostředí pro testování
nových metod byla vytvořena open-source [^bugs-os] verze OpenBUGS. Vývoj
obou aplikací se časem rozdělil a obě mají silné stránky v něčem jiném.
Software OpenBUGS dokáže flexibilně měnit simulační metody nebo simulace 
provádět paralelně. Vývoj softwaru WinBUGS mířil primárně na excelenci v 
epidemiologickém a farmakokinetikou
\parencite{LunnEtAl2009_BUGSProjectEvolution}.

[^bugs-os]: software, který má veřejný zdrojový kód; tzn. *otevřený software*.

Aplikace z rodiny BUGS však trpěli několika nedostatky. Tím hlavním je, že 
jejich vývoj závisí na hrstce vývojářu a i přes to, že je kód (alespoň pro 
software OpenBUGS) veřejně dostupný, je vývoj problematický. To je způsobeno
primárně komplexitou kódu a programovacím jazykem, ve kterém je software napsaný.
Druhou velkou nevýhodou je právě programovací jazyk, který se nedokáže vyrovnat
např. jazyku C++, ve kterém jsou napsána většina novodobých simulačních programů
\parencite{LunnEtAl2009_BUGSProjectEvolution}.

V programovacím jazyce R lze s programy BUGS komunikovat pomocí hned
několika balíčků. První možností jsou balíčku R2WinBUGS a R2OpenBUGS
\parencite{SturtzEtAl2005_R2WinBUGSPackageRunning},
které umí komunikovat s programy WinBUGS a OpenBUGS. Jelikož byl balíček
OpenBUGS aktualizován naposledy v r. 2020, je smysluplnější[^bugs-pkgs]
v případě zájmu používat balíček R2WinBUGS, který poslední aktualizaci obdržel
v r. 2024. Balíčky nenabízejí aplikační přístup, ale slouží jako automatizační
pomůcka. Pokud funkcím předáte data, model a parametry simulací, tak se spustí
zvolený software (OpenBUGS nebo WinBUGS), do kterého jsou automaticky zvoleny
preference uživatel pomocí skriptu. Po dokončení se program sám zavře a 
výsledky jsou dopstupné v jazyce R.

[^bugs-pkgs]: aktuální k 2024-08-27.

Druhou možností je balíček BRugs 
\parencite{ThomasEtAl2006_MakingBUGSOpen}, který dokáže komunikovat s OpenBUGS
pomocí programatického prostředí a není tedy nutné, aby balíček/funkce na pozadí
spouštěli samotné programy. Na rozdíl od balíčku R2WinBUGS, který externě spouští
program, je BRugs více flexibilní. Nastavení probíhá pomocí metod, které
nastavují, spouští a inicializují jednotlivé řetěze a simulace. Nevýhodou balíčku
je, že je nutné ho kompilovat, což může být pro méně zkušené uživatele náročné.

#### Balíček {R2WinBUGS}

Před používáním samotného balíčku je nutné stáhnout program WinBUGS. Aktuálně
[^bugs-datum] lze program stáhnout z Google disku[^bugs-gdrive] Cambridgské
univerzity, kde se nachází jak verze OpenBUGS a WinBUGS. Balíček R2WinBUGS
dokáže pracovat jak s verzí OpenBUGS, tak s verzí WinBUGS. Kompletní a 
okomentované použití balíčku je v kódu \ref{code-r2winbugs-model}.

[^bugs-datum]: aktuální k 2024-09-02
[^bugs-gdrive]: [https://drive.google.com/drive/folders/1XzG681AaZpRtPtynkuGUt2BspMTvhYoP](https://drive.google.com/drive/folders/1XzG681AaZpRtPtynkuGUt2BspMTvhYoP), popř. aktuální odkaz
lze získat z webových stránek [https://www.mrc-bsu.cam.ac.uk/software](https://www.mrc-bsu.cam.ac.uk/software)

```{r bugs-model}
#| echo: true
#| code-caption: Simulace pomocí balíčku R2WinBUGS a nástroje WinBUGS
#| code-label: code-r2winbugs-model
bugs <- R2WinBUGS::bugs(
    data = list(
        N     = length(simulovana_data), # Pocet pozorovani
        x     = simulovana_data,         # Vstupni data
        alpha = 0.01,                    # Hodnota parametru alpha
        beta  = 0.01                     # Hodnota parametru beta
    ),
    inits = list(    # Pocatecni hodnoty
        list(p = 0.5),
        list(p = 0.5)
    ),
    n.chains = 2,    # Pocet retezu
    n.iter = 5000,   # Pocet iteraci
    n.burnin = 1000, # Pocet warm-up iteraci
    n.thin = 1,      # Thining konstanta
    parameters.to.save = c("p"),                          # Parametry, ktere ulozit
    working.directory = "kapitoly/modely",                # Nastaveni adresare
    model.file = "r2winbugs.txt",                         # Cesta k modelu
    bugs.directory = r"(R:/BachelorBayes/sw/WinBUGS14/)", # Cesta k WinBUGS
    clearWD = T,    # Odstran pracovni soubory
    bugs.seed = 123 # Replikovatelnost
)
```

Nejprve je nutné definovat vstupní data, se kterými bude modle pracovat (řádky
2 -- 7). Dále je vhodné nastavit počáteční hodnoty, které se použijí pro 
simulaci (řádky 8 --- 11). Jelikož jsou v tomto případě použité dva řetězce,
je nutné definovat dva listy s počátečními hodnotamy. Poté jsou nastavené
parametry simulace (řádky 12 -- 15) a uložení vybraných parametrů (řádek 16).
Pro správnou funkčnost je nutné metodě `bugs` sdělit, s jakým modelem a jakou
verzí programu WinBUGS/OpenBUGS bude pracovat. Řádky 17 --- 19 nastavují 
pracovní adresář, cestu k modelu a cestu k samotnému programu. Při spuštění
simulace metoda ukládá mezivýstupy[^bugs-meziv], které lze deaktivovat
pomocí parametru `clearWD` na řádku 20. Na závěr je
velmi důležité nastavit parametr `bugs.seed`, díky kterému (v kombinaci s 
počátečními hodnotami) lze dosáhnout replikovatelnosti. 

V celku netradiční je definice modelu, která musí být uložena v externím souboru
s příponou `.txt`, popř. `.bugs`. Model je definovaný ve výpise \ref{model-bugs}.

```{r bugs-model-print}
#| results: model
#| model-caption: Příklad modelu definovaném pro software WinBUGS
#| model-label: model-bugs
cat(paste(readLines("./kapitoly/modely/r2winbugs.txt"), collapse = "\n"))
```

Na řádku 1 je začátek bloku s názvem **model**, ve kterém je definovaný 
libovolný bayesovský model. Řáded 3 popisuje rozdělení dat; v tomto případě
zápis řiká, že každé jednotlivé pozorování má Alternativní[^bugs-bern]
rozdělení
\parencite[str. 129]{Marek2012_Pravdepodobnost}
s parametrem $\pi = p$. Zápis je ve *for* cyklu, který rozdělení
přiřazuje každému pozorování od 1 do `N`. Na řádku 6 je pak definované
apriorní rozdělení pro parametr `p`, které je v tomto případě Beta 
\parencite[str. 32]{Mala2016_VybraneKapitolyTeorie} s parametry $\alpha$ a 
$\beta$. Všechny předem známé proměnné, tedy proměnné `x`, `N`, $\alpha$ a 
$\beta$ jsou definované ve funkci `bugs` v kódu \ref{code-r2winbugs-model}
na řádcích 2 --- 7. Po spuštění funkce se spustí program WinBUGS a výsledky
se uloží do proměnné `bugs`, jejíž výpis je v \ref{model-r2winbugs-out}.

[^bugs-bern]: V literatuře je místo pojmu *Alternativní* rozdělení občas
používáno *Bernoulliho* rozdělení, význam však zůstává identický a jde pouze
o záměnu názvu.

```{r bugs-print}
#| results: model
#| model-caption: Výstup z objektu vytvořeným baličkem R2WinBUGS
#| model-label: model-r2winbugs-out
print(bugs, digits.summary = 3)
```

První řádek slouží čistě k rekapitulaci toho, jaký model a jaký program byli k
inferenci použity. Druhý řádek popisuje nastavení simulace, v tomto případě
byly generovány dva řetězce o 5 000 vzorcích, z čehož bylo prvních 1 000 vzorků
smazáno jako rozehřívací období; dohromady je v proměnné bugs uloženo 8 0000
vzorků. Po krátkém popisu následuje na řádcích 4 -- 6 deskriptivní statistika,
která popisuje uložené parametry. Navíc je zde automaticky uložen parametr 
`deviance`, který popisuje míru shody modelu s daty a jeho predikční schopnost.
Střední hodnota posteriorního rozdělení parametru `p`
je `r fmt_num(bugs$summary["p", "mean"])` se směrodatnou odchylkou 
`r fmt_num(bugs$summary["p", "sd"])`. Statistika $R_{hat}$ se prakticky rovná
jedné, což naznačuje nulovou autokorelaci. Efektivní velikost vzorků je 8 000,
což dále potvrzuje uspokojivou konvergenci.

Na konci výpisu je slovní popis výsledků, který může pomoct pro prvotní 
zorientování ve výstupu. Je zde také popsán parametr pD a DIC. Výsledky simulací jsou uložené ve formátu listu. Ke vygenerovaným řetězcům se lze dostat například pomocí `<objekt>$sims.list` nebo `<objekt>$sims.matrix`.

!!! Výpočet deviance, možná se bude hodit.

```{r }
#| results: hide
ll <- function(y, p) {
    return(y * log(p) + (1 - y) * log(1 - p))
}

deviance <- function(y, p) {
    return(-2 * ll(y, p))
}

posterior_samples <- bugs$sims.list$p
deviances <- sapply(posterior_samples, \(x) sum(deviance(simulovana_data, x)))

D_bar <- mean(deviances)
D_bar
```

```{r }
#| results: hide
mean_posterior <- mean(posterior_samples)
D_hat <- sum(deviance(simulovana_data, mean_posterior))
D_hat
```

```{r }
#| results: hide
D_bar - D_hat
```

```{r }
#| results: hide
bugs
```
